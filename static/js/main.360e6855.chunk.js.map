{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","name","Component","MemeGenerator","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","topText","bottomText","randomImg","allMemeImage","event","setState","defineProperty","target","value","max","Math","floor","random","length","imageIndex","getRandomInt","url","_this2","fetch","then","response","json","memes","data","placeholder","onChange","handleChange","bind","onClick","chooseRandomImg","src","alt","App","src_Header","src_MemeGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAYeA,yLARP,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,KAAKC,MAAMC,cAJjCC,qBCkFNC,cAhFX,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMC,KAEDU,MAAQ,CACRC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,aAAc,IAPJV,4EAUNW,GACThB,KAAKiB,SAALX,OAAAY,EAAA,EAAAZ,CAAA,GACKU,EAAMG,OAAOjB,KAAOc,EAAMG,OAAOC,6CAI7BC,GAET,OADAA,EAAMC,KAAKC,MAAMF,GACVC,KAAKC,MAAMD,KAAKE,SAAWH,6CAGlC,IAAII,EAAOzB,KAAKW,MAAMI,aAAaU,OAC/BC,EAAW1B,KAAK2B,aAAaF,EAAO,GACxCzB,KAAKiB,SAAS,CACVH,UAAUd,KAAKW,MAAMI,aAAaW,GAAYE,kDAMnC,IAAAC,EAAA7B,KACf8B,MAAM,qCACLC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAC,GACF,IACWE,EAAOF,EAASG,KAAhBD,MACPL,EAAKZ,SAAS,CACVF,aAAamB,uCAMzB,OACItC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YACjBH,EAAAC,EAAAC,cAAA,SACAC,UAAU,aACVG,KAAK,UACLkC,YAAY,iBACZhB,MAAOpB,KAAKW,MAAMC,QAClByB,SAAUrC,KAAKsC,aAAaC,KAAKvC,SAGjCJ,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YACjBH,EAAAC,EAAAC,cAAA,SACAI,KAAK,aACLH,UAAU,aACVqC,YAAY,oBACZhB,MAAOpB,KAAKW,MAAME,WAClBwB,SAAUrC,KAAKsC,aAAaC,KAAKvC,SAG/BJ,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASyC,QAASxC,KAAKyC,gBAAgBF,KAAKvC,OAA9D,kBAEJJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOC,KAAKW,MAAMC,SAC5BhB,EAAAC,EAAAC,cAAA,OAAK4C,IAAK1C,KAAKW,MAAMG,UAAW6B,IAAI,KACpC/C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUC,KAAKW,MAAME,qBA1EvBV,aCcbyC,MAXf,WACE,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAAC+C,EAAD,CAAQ3C,KAAK,mBACbN,EAAAC,EAAAC,cAACgD,EAAD,QCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.360e6855.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './mystyle.css'\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h1 className='headertag'>{this.props.name}</h1>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\nimport './mystyle.css'\r\nclass MemeGenerator extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             topText: \"\",\r\n             bottomText: \"\",\r\n             randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n             allMemeImage: \"\"\r\n        }\r\n    }\r\n    handleChange(event){\r\n        this.setState({\r\n            [event.target.name] :event.target.value\r\n        })\r\n    }\r\n\r\n    getRandomInt(max) {\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * max) ; //The maximum is exclusive and the minimum is inclusive\r\n      }\r\n    chooseRandomImg(){\r\n        let length=this.state.allMemeImage.length;\r\n        let imageIndex=this.getRandomInt(length-1);\r\n        this.setState({\r\n            randomImg:this.state.allMemeImage[imageIndex].url\r\n        })\r\n    }\r\n\r\n\r\n\r\n    componentDidMount(){\r\n        fetch('https://api.imgflip.com/get_memes')\r\n        .then(response=>response.json())\r\n        .then(response=>\r\n            {\r\n                const {memes}=response.data\r\n                this.setState({\r\n                    allMemeImage:memes\r\n                })\r\n            })\r\n    }\r\n    render() {        \r\n        \r\n        return (\r\n            <div>\r\n            <div className='meme-form'>\r\n                <label className='labeltag'>\r\n                <input\r\n                className='inputClass'\r\n                name='topText'\r\n                placeholder='Enter Top Text'\r\n                value={this.state.topText}\r\n                onChange={this.handleChange.bind(this)}/>\r\n                \r\n                </label>\r\n                <br/>\r\n\r\n                <label className='labeltag'>               \r\n                <input\r\n                name='bottomText'\r\n                className='inputClass'\r\n                placeholder='Enter Bottom Text'\r\n                value={this.state.bottomText}\r\n                onChange={this.handleChange.bind(this)}/>\r\n                \r\n                </label>\r\n                  <br/>\r\n                <button className='submit' onClick={this.chooseRandomImg.bind(this)}>Next Template</button>\r\n            </div>\r\n            <div className='meme'>\r\n            <h2 className='top'>{this.state.topText}</h2> \r\n                <img src={this.state.randomImg} alt=\"\"></img>                              \r\n                <h2 className='bottom'>{this.state.bottomText}</h2>\r\n\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator\r\n","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport MemeGenerator from './MemeGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n        <Header name='Meme Generator'></Header>\n        <MemeGenerator/>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}